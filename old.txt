import cv2
import numpy as np
import time
import matplotlib.pyplot as plt
import os

def hough_transform(img: np.ndarray) -> np.ndarray:
	# GRAYSCALE IMAGE
	gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
	edges = cv2.Canny(gray, 100, 200)
	# ret, thresh = cv2.threshold(gray, 127, 255, 0)

	# FILTER OUT STRAIGHT LINES
	contours, _ = cv2.findContours(edges, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
	new_contours = []
	for contour in contours:
		center, dims, angle = cv2.minAreaRect(contour)
		w1, h1 = dims
		# x,y,w2,h2 = cv2.boundingRect(contour)

		divisor = max(w1, h1)
		if max(w1, h1) == 0:
			divisor = 1

		aspect_ratio = min(w1, h1) / divisor
		thresh = 0.5

		if not(float(aspect_ratio) < thresh):
			new_contours.append(contour)

	cimg = cv2.drawContours(gray.copy(), new_contours, -1, (255,255,255), 3)

	# SMOOTH IMAGE AND DETECT CIRCLES
	# blurframe = cv2.GaussianBlur(cimg, (17, 17), 0)
	# ret,thresh = cv2.threshold(img, 130, 255, cv2.THRESH_BINARY)
	circles = cv2.HoughCircles(cimg,cv2.HOUGH_GRADIENT,1.2,100, param1=100,param2=30,minRadius=0,maxRadius=200)
	# circles = cv2.HoughCircles(blurframe,cv2.HOUGH_GRADIENT,1.2,100,
    #                         param1=100,param2=30,minRadius=100,maxRadius=1000)

	try:
		circ = circles[0]
	except:
		cv2.imwrite('error_image.png', gray)

	descriptors = []

	circles = np.uint16(np.around(circles))
	for i in circles[0,:]:
		# draw the outer circle
		cv2.circle(img,(i[0],i[1]),i[2],(0,255,0),2)
		# draw the center of the circle
		cv2.circle(img,(i[0],i[1]),2,(0,0,255),3)

		descriptors.append({"center": (i[0], i[1]), "diameter": 2*i[2]})

	return img, descriptors

if __name__ == '__main__':
	# print(os.listdir('./data/ball_dataset'))
	# filepath = './data/balls.jpg'
	# start = time.time()
	# circ_img = hough_transform(cv2.imread('./data/balls.jpg'))
	# print(f'time -> {time.time() - start}')
	# cv2.imwrite('out.png', circ_img)
	filepath = './field.JPG'
	# for file in os.listdir('./data/ball_dataset-nopreprocessing'):

	inp_img = cv2.imread(filepath)
	img = cv2.resize(inp_img, (1500, 1000))

	hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
	# hsv = cv2.GaussianBlur(hsv, (5, 5), 1)

	# lower= np.array([0, 130, 150])
	# upper = np.array([255, 255, 255])

	# lower = np.array([20, 100, 100])
	# upper = np.array([180, 255, 255])

	# lower_blue = np.array([60, 35, 140])
	# upper_blue = np.array([180, 255, 255])

	lower_blue = np.array([100, 50, 0])
	upper_blue = np.array([140, 255, 255])

	mask = cv2.inRange(hsv, lower_blue, upper_blue)
	# where there is something in the frame and the mask is true
	bitmask = cv2.bitwise_and(img, img, mask=mask)

	circ, descriptors = hough_transform(bitmask)

	cv2.imwrite('./out-detected.png', circ)

	print(descriptors)

	biggest_d = float('-inf')
	for hash in descriptors:
		diameter = hash["diameter"]

		if diameter > biggest_d:
			biggest_d = diameter 

	distance = (9.5 * 8) / biggest_d

	print(f'DISTANCE OF CLOSEST BALL -> {distance}')
	
	# plt.imshow(img)
	# plt.show()

	# mask = cv2.GaussianBlur(mask, (5, 5), 1)

	# start = time.time()
	# circ = hough_transform(img)

	# x, y, r = circ[0]
	# with open('./data/labels/ball_dataset_labels.txt', 'a') as f:
	# 	num = file.split('.')[0]

	# 	x1 = x - r
	# 	y1 = y - r
	# 	w = (x+r) - x1
	# 	h = (y+r) - y1

	# 	f.write(f'{num} $ {x1} {y1} {w} {h}\n')

	# print(f'time -> {time.time() - start}')